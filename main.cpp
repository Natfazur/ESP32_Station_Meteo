//library for all the things with internet
#include <HTTPClient.h>
#include <WiFi.h>
#include "time.h"

//library for the sensors
#include <Adafruit_Sensor.h>
#include <DHT.h>

//library for the oled screen and display
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <SPI.h>
#include <Wire.h>
#include <pgmspace.h>



//all the bitmaps used on the project
static const unsigned char logo_temp[] PROGMEM = {
	// 'images, 15x15px
	0x00, 0x00, 0x02, 0x80, 0x04, 0x80, 0x04, 0x80, 0x05, 0x80, 0x04, 0x80, 0x04, 0x80, 0x04, 0x80, 
	0x05, 0x80, 0x05, 0xc0, 0x03, 0x80, 0x0b, 0xa0, 0x03, 0xc0, 0x07, 0xc0, 0x00, 0x00
};

static const unsigned char logo_hum1 [] PROGMEM = {
	// 'images, 15x15px
	0xfe, 0xfe, 0xfc, 0x7e, 0xfc, 0x7e, 0xf8, 0x3e, 0xf0, 0x1e, 0xe0, 0x0e, 0xe6, 0x0e, 0xc6, 0x46, 
	0xc0, 0x86, 0xc1, 0x06, 0xc2, 0xc6, 0xc4, 0xc6, 0xe0, 0xce, 0xf0, 0x1e, 0xf8, 0x3e
};

static const unsigned char logo_hum [] PROGMEM = {
	// '1512650-200, 15x15px
	0x01, 0x00, 0x03, 0x80, 0x03, 0x80, 0x07, 0xc0, 0x0f, 0xe0, 0x1f, 0xf0, 0x19, 0xf0, 0x39, 0xb8, 
	0x3f, 0x78, 0x3e, 0xf8, 0x3d, 0x38, 0x3b, 0x38, 0x1f, 0x30, 0x0f, 0xe0, 0x07, 0xc0
};

static const unsigned char logo_temp1 [] PROGMEM = {
	// '1512650-200, 15x15px
	0xff, 0xfe, 0xfd, 0x7e, 0xfb, 0x7e, 0xfb, 0x7e, 0xfa, 0x7e, 0xfb, 0x7e, 0xfb, 0x7e, 0xfb, 0x7e, 
	0xfa, 0x7e, 0xfa, 0x3e, 0xfc, 0x7e, 0xf4, 0x5e, 0xfc, 0x3e, 0xf8, 0x3e, 0xff, 0xfe
};

static const unsigned char logo_heure [] PROGMEM = {
	// 'clock-icon-512x512-gnp77sld, 15x15px
	0x03, 0x80, 0x0c, 0x60, 0x30, 0x18, 0x20, 0x08, 0x40, 0x04, 0x41, 0x04, 0x81, 0x02, 0x81, 0x02, 
	0x80, 0x82, 0x40, 0x44, 0x40, 0x04, 0x20, 0x08, 0x30, 0x18, 0x0c, 0x60, 0x03, 0x80
};

static const unsigned char logo_heure1 [] PROGMEM = {
	// 'clock-icon-512x512-gnp77sld, 15x15px
	0xfc, 0x7e, 0xf3, 0x9e, 0xcf, 0xe6, 0xdf, 0xf6, 0xbf, 0xfa, 0xbe, 0xfa, 0x7e, 0xfc, 0x7e, 0xfc, 
	0x7f, 0x7c, 0xbf, 0xba, 0xbf, 0xfa, 0xdf, 0xf6, 0xcf, 0xe6, 0xf3, 0x9e, 0xfc, 0x7e
};

static const unsigned char logo_param [] PROGMEM = {
	// 'R, 15x15px
	0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x37, 0xd8, 0x7f, 0xfc, 0x7e, 0xfc, 0x3c, 0x78, 0x18, 0x30, 
	0x3c, 0x78, 0x7e, 0xfc, 0x7f, 0xfc, 0x37, 0xf8, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00
};

static const unsigned char logo_param1 [] PROGMEM = {
	// 'R, 15x15px
	0xff, 0xfe, 0xfc, 0x7e, 0xfc, 0x7e, 0xc8, 0x26, 0x80, 0x02, 0x81, 0x02, 0xc3, 0x86, 0xe7, 0xce, 
	0xc3, 0x86, 0x81, 0x02, 0x80, 0x02, 0xc8, 0x06, 0xfc, 0x7e, 0xfc, 0x7e, 0xff, 0xfe
};


static const unsigned char Temp [] PROGMEM = {
	// 'Capture d'écran 2024-04-24 183726, 100x20px
	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1e, 0x78, 0xc0, 0x60, 0xf4, 
	0xcf, 0x8e, 0x42, 0x58, 0x78, 0x08, 0x00, 0x18, 0x1f, 0x7d, 0xe6, 0xe1, 0xf7, 0xef, 0xce, 0x63, 
	0xfc, 0x7c, 0x08, 0x00, 0x18, 0x63, 0x42, 0x17, 0x9a, 0x37, 0x20, 0x66, 0x63, 0xe5, 0x8c, 0x00, 
	0x00, 0x18, 0x7f, 0x42, 0x17, 0x1f, 0xf6, 0x07, 0xe6, 0x63, 0xc1, 0xfc, 0x00, 0x00, 0x18, 0x7c, 
	0x42, 0x16, 0x1f, 0xc6, 0x07, 0xe6, 0x63, 0xc1, 0xf0, 0x00, 0x00, 0x18, 0x60, 0x42, 0x17, 0xf6, 
	0x16, 0x08, 0x66, 0x63, 0xc1, 0x80, 0x00, 0x00, 0x18, 0x1f, 0x42, 0x17, 0xe1, 0xf6, 0x07, 0xe3, 
	0x1f, 0xc0, 0x7c, 0x08, 0x00, 0x18, 0x1f, 0x42, 0x16, 0x01, 0xf6, 0x07, 0xe3, 0x1f, 0xc0, 0x7c, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

static const unsigned char Hum [] PROGMEM = {
	// 'Capture d'écran 2024-04-24 184306, 100x20px
	0xc1, 0x00, 0x00, 0x06, 0x05, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 
	0x06, 0x05, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x78, 0xc0, 0x3c, 0x38, 
	0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x63, 0x7d, 0xe6, 0x7d, 0xb8, 0xf8, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0x63, 0x42, 0x16, 0x85, 0xb1, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0x63, 0x42, 0x16, 0x85, 0xb1, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x63, 
	0x42, 0x16, 0x85, 0xb1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x63, 0x42, 0x16, 0x85, 
	0xb1, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x1f, 0x42, 0x16, 0xfd, 0x8c, 0xf8, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x1f, 0x42, 0x16, 0xfd, 0x8c, 0xf8, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

static const unsigned char Param [] PROGMEM = {
	// 'Param, 100x20px
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x3e, 0x2c, 0x7c, 0x78, 0xc1, 
	0xe6, 0x2c, 0x3c, 0x7c, 0x08, 0x00, 0x00, 0xfe, 0x7e, 0x7e, 0xfc, 0xfd, 0xe1, 0xff, 0x7e, 0x3e, 
	0x80, 0x18, 0x00, 0x00, 0xfe, 0x01, 0xf2, 0x03, 0xc6, 0x36, 0x36, 0x72, 0xc6, 0x80, 0x00, 0x00, 
	0x00, 0xc0, 0x1f, 0xe0, 0x3f, 0xc6, 0x37, 0xf6, 0x60, 0xfe, 0x70, 0x00, 0x00, 0x00, 0xc0, 0x1f, 
	0xe0, 0x3f, 0xc6, 0x37, 0xc6, 0x60, 0xf8, 0x70, 0x00, 0x00, 0x00, 0xc0, 0x61, 0xe0, 0xc3, 0xc6, 
	0x36, 0x26, 0x60, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0xe0, 0x3f, 0xc6, 0x31, 0xf1, 0xe0, 
	0x3e, 0xf0, 0x08, 0x00, 0x00, 0xc0, 0x1f, 0xe0, 0x3f, 0xc6, 0x31, 0xf1, 0xe0, 0x3e, 0xf0, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

static const unsigned char delai_val [] PROGMEM = {
	// 'Delai_valeurs, 80x14px
	0xf8, 0x06, 0x02, 0x18, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x86, 0x06, 0x00, 0x18, 0x40, 0x60, 
	0x00, 0x03, 0x80, 0x00, 0x86, 0x7f, 0xf2, 0x18, 0x5e, 0x67, 0xe7, 0xe3, 0x82, 0x00, 0x87, 0x9e, 
	0x0a, 0x05, 0x81, 0xf9, 0xe7, 0x94, 0x00, 0x00, 0x87, 0xfe, 0x7a, 0x05, 0x8f, 0xff, 0xe7, 0x83, 
	0x00, 0x00, 0x87, 0x87, 0x8a, 0x02, 0x11, 0xf8, 0x67, 0x80, 0x80, 0x00, 0x87, 0x9f, 0x8a, 0x02, 
	0x11, 0xf9, 0xe7, 0x80, 0x80, 0x00, 0xf8, 0x7e, 0x7a, 0x02, 0x0f, 0xe7, 0x9f, 0x87, 0x02, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char delai_val1 [] PROGMEM = {
	// 'Delai_valeurs, 80x14px
	0x07, 0xf9, 0xfd, 0xe7, 0xbf, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x79, 0xf9, 0xff, 0xe7, 0xbf, 0x9f, 
	0xff, 0xfc, 0x7f, 0xff, 0x79, 0x80, 0x0d, 0xe7, 0xa1, 0x98, 0x18, 0x1c, 0x7d, 0xff, 0x78, 0x61, 
	0xf5, 0xfa, 0x7e, 0x06, 0x18, 0x6b, 0xff, 0xff, 0x78, 0x01, 0x85, 0xfa, 0x70, 0x00, 0x18, 0x7c, 
	0xff, 0xff, 0x78, 0x78, 0x75, 0xfd, 0xee, 0x07, 0x98, 0x7f, 0x7f, 0xff, 0x78, 0x60, 0x75, 0xfd, 
	0xee, 0x06, 0x18, 0x7f, 0x7f, 0xff, 0x07, 0x81, 0x85, 0xfd, 0xf0, 0x18, 0x60, 0x78, 0xfd, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

//enter your the ssid and the password of your WiFi access point
char ssid[] = "";
char pass[] = "";

//parameter to have the time
int offset = 0;
const char* ntpServer = "ntp.unice.fr";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;

//define the I2C address of the screen
#define i2c_Address 0x3c 

//Initialize the screen
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1 
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//initialize the DHT11 sensor!
DHT dht(1, DHT11);

//variables for the temp and the humidity
int sensor_temp_offset=0;
int sensor_hum_offset=0;
float temp=0;
float hum=0;
float ptemp=0;
float phum=0;

//variables used in the parameter page 
int num[4];
int enter_param=0;
int line_param=0;
int delai_par=0;

int poffset=0;

//variable that represent the page number
int k=0;

//variable used to manage the sending of the values
int n=1;
int lastmin=0;
int f=0;

//variable used to filter the signal of the buttons
int lastmill = 0;

//function to send the datas on the spreadsheet
void sendData(int temp ,int hum, String func) {
   HTTPClient http;
   String url="https://script.google.com/macros/s/AKPnguTcA49DRW_nAms89RPig/exec?func="+func+"&temp="+String(temp)+"&hum="+String(hum);
   Serial.println(url);
  Serial.print("Making a request");
  http.begin(url);
  int httpCode = http.GET();  
  http.end();
  Serial.println(": done "+httpCode);
}

//function to navigate from a page to another
void IRAM_ATTR flanc_haut(){
  if (millis()-lastmill > 200){
    if (enter_param!=1){
      k-=1;
      if (k<0) k=3;
      Serial.println(k);
    }
  }
  lastmill=millis();
}

//function to navigate from a page to another
void IRAM_ATTR flanc_bas(){
  if (millis()-lastmill > 200){
    if (enter_param!=1){
      k++;
      Serial.println(k);
      if (k>=4) k=0;
    }
  }
  lastmill=millis();
}

//function to navigate in the parameter page
void IRAM_ATTR flanc_gauche(){
  if (millis()-lastmill > 200){
    if (enter_param=1){
      delai_par-=1;
      if (delai_par<0) delai_par=4;
      Serial.println(delai_par);
    }
    
  }
  lastmill=millis();
}

//function to navigate in the parameter page
void IRAM_ATTR flanc_droite(){
  if (millis()-lastmill > 200){
    if (enter_param=1){
      delai_par++;
      if (delai_par>=5) delai_par=0;
    }
    
  }
  lastmill=millis();
}

//function to enter in the parameter page and choose an option
void IRAM_ATTR flanc_validation(){
  if (millis()-lastmill > 200){
    if (k==3){
      enter_param=1;
      if (delai_par==0) {offset=99;
      Serial.println(offset);
      num[2]=0;
      num[1]=0;
      num[0]=1;
      num[3]=0;
      num[4]=0;
      }
      if (delai_par==1) {offset=1;
      Serial.println(offset);
      num[2]=0;
      num[1]=1;
      num[0]=0;
      num[3]=0;
      num[4]=0;
      }
      if (delai_par==2) {offset=2;
      Serial.println(offset);
      num[2]=1;
      num[1]=0;
      num[0]=0;
      num[3]=0;
      num[4]=0;
      }
      if (delai_par==3) {offset=5;
      Serial.println(offset);
      num[2]=0;
      num[1]=0;
      num[0]=0;
      num[3]=1;
      num[4]=0;
      }
      if (delai_par==4) {offset=10;
      Serial.println(offset);
      num[2]=0;
      num[1]=0;
      num[0]=0;
      num[3]=0;
      num[4]=1;
      }
      f=0;
    }
  }
  lastmill=millis();
}

//function to exit the parameter page
void IRAM_ATTR flanc_retour(){
  if (millis()-lastmill > 200){
    if (k==3){
      enter_param=0;
    }
    
  }
  lastmill=millis();
}

//display the temperature page
void aff_temp(int temp){
  display.drawBitmap(108,40, logo_hum, 15, 15, 1);
  display.drawBitmap(108,20, logo_temp1, 15, 15, 1);
  display.drawBitmap(108,0, logo_heure,15,15,1);
  display.drawBitmap(0,0,Temp,100,20,1);
  display.setTextSize(2);
  display.setCursor(30,30);
  display.printf("%d%cC", temp, 248);
  display.drawLine(108,60,116,64,1);
  display.drawLine(123,60,117,63,1);
  display.display();
}

//display the humidity page
void aff_hum(int hum){
  display.setTextSize(1);
  display.drawBitmap(108,29, logo_hum1, 15, 15, 1);
  display.drawBitmap(108,9, logo_temp, 15, 15, 1);
  display.drawBitmap(0,0,Hum,100,20,1);
  display.drawBitmap(108,49,logo_param,15,15,1);
  display.setCursor(20,20);
  display.print(hum);
  display.print("%");
  display.drawRect(14,30,90,30,1);
  display.fillRect(15,31,((hum*88)/100),29,1);
  display.drawLine(108,4,116,0,1);
  display.drawLine(123,4,117,1,1);
  display.display();
}

//dispaly the main page
void aff_heure(){
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
  }
  display.drawBitmap(108,40, logo_hum, 15, 15, 1);
  display.drawBitmap(108,20, logo_temp, 15, 15, 1);
  display.drawBitmap(108,0, logo_heure1,15,15,1);
  display.setCursor(0,0);
  display.setTextSize(2);
  display.printf("%02d:%02d:%02d", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
  display.setTextSize(1);
  display.setCursor(10,20);
  display.printf("%02d/%02d/%02d", timeinfo.tm_mday,(timeinfo.tm_mon+1),(timeinfo.tm_year+1900));
  display.drawLine(108,60,116,64,1);
  display.drawLine(123,60,117,63,1);
  display.display();
}

//display the parameter page
void aff_param(){
  display.drawBitmap(0,0,Param,100,20, 1);
  display.drawBitmap(108,29, logo_hum, 15, 15, 1);
  display.drawBitmap(108,9, logo_temp, 15, 15, 1);
  display.drawBitmap(108,49,logo_param1,15,15,1);
  display.drawLine(108,4,116,0,1);
  display.drawLine(123,4,117,1,1);
  display.drawBitmap(0,15,delai_val,80,14,1);
  if (enter_param==1) {

    if (delai_par==0){
      display.drawRect(0,27,30,12,1);
      display.drawRect(3,30,5,5,1);
      display.setCursor(10,30);
      display.print("Off");

      display.drawRect(3,30,5,5,1);
      display.setCursor(10,30);
      display.print("Off");

      display.drawRect(33,30,5,5,1);
      display.setCursor(40,30);
      display.print("1");

      display.drawRect(3,40,5,5,1);
      display.setCursor(10,40);
      display.print("2");

      display.drawRect(33,40,5,5,1);
      display.setCursor(40,40);
      display.print("5");

      display.drawRect(3,50,5,5,1);
      display.setCursor(10,50);
      display.print("10");
      }

    if (delai_par==1){
      display.drawRect(30,27,17,12,1);
      display.drawRect(33,30,5,5,1);
      display.setCursor(40,30);
      display.print("1");

      display.drawRect(3,30,5,5,1);
      display.setCursor(10,30);
      display.print("Off");

      display.drawRect(3,40,5,5,1);
      display.setCursor(10,40);
      display.print("2");

      display.drawRect(33,40,5,5,1);
      display.setCursor(40,40);
      display.print("5");

      display.drawRect(3,50,5,5,1);
      display.setCursor(10,50);
      display.print("10");
      }

    if (delai_par==2){
      display.drawRect(0,37,17,12,1);
      display.drawRect(33,30,5,5,1);
      display.setCursor(40,30);
      display.print("1");

      display.drawRect(3,30,5,5,1);
      display.setCursor(10,30);
      display.print("Off");

      display.drawRect(3,40,5,5,1);
      display.setCursor(10,40);
      display.print("2");

      display.drawRect(33,40,5,5,1);
      display.setCursor(40,40);
      display.print("5");

      display.drawRect(3,50,5,5,1);
      display.setCursor(10,50);
      display.print("10");
      }

    if (delai_par==3){
      display.drawRect(30,37,17,12,1);
      display.drawRect(33,30,5,5,1);
      display.setCursor(40,30);
      display.print("1");

      display.drawRect(3,30,5,5,1);
      display.setCursor(10,30);
      display.print("Off");

      display.drawRect(3,40,5,5,1);
      display.setCursor(10,40);
      display.print("2");

      display.drawRect(33,40,5,5,1);
      display.setCursor(40,40);
      display.print("5");

      display.drawRect(3,50,5,5,1);
      display.setCursor(10,50);
      display.print("10");
    }

    if (delai_par==4){
      display.drawRect(0,47,25,12,1);
      display.drawRect(33,30,5,5,1);
      display.setCursor(40,30);
      display.print("1");

      display.drawRect(3,30,5,5,1);
      display.setCursor(10,30);
      display.print("Off");

      display.drawRect(3,40,5,5,1);
      display.setCursor(10,40);
      display.print("2");

      display.drawRect(33,40,5,5,1);
      display.setCursor(40,40);
      display.print("5");

      display.drawRect(3,50,5,5,1);
      display.setCursor(10,50);
      display.print("10");
    }
  }
  else {
    display.drawRect(3,30,5,5,1);
    display.setCursor(10,30);
    display.print("Off");

    display.drawRect(33,30,5,5,1);
    display.setCursor(40,30);
    display.print("1");

    display.drawRect(3,40,5,5,1);
    display.setCursor(10,40);
    display.print("2");

    display.drawRect(33,40,5,5,1);
    display.setCursor(40,40);
    display.print("5");

    display.drawRect(3,50,5,5,1);
    display.setCursor(10,50);
    display.print("10");
  }
  if (num[0]==1) display.fillRect(3,30,5,5,1);
  if (num[1]==1) display.fillRect(33,30,5,5,1);
  if (num[2]==1) display.fillRect(3,40,5,5,1);
  if (num[3]==1) display.fillRect(33,40,5,5,1);
  if (num[4]==1) display.fillRect(3,50,5,5,1);

  display.display();
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  //connect the ESP32 to the WiFi
  WiFi.begin(ssid, pass);
  Serial.println("\nConnecting");

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(100);
  }

  Serial.println("\nConnected to the WiFi network");
  Serial.print("Local ESP32 IP: ");
  Serial.println(WiFi.localIP());

  //config the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  //config the button and assign them their function
  for (int i=2;i<=7;i++) pinMode(i, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(2), flanc_haut, FALLING);
  attachInterrupt(digitalPinToInterrupt(3), flanc_bas, FALLING);
  attachInterrupt(digitalPinToInterrupt(4), flanc_gauche, FALLING);
  attachInterrupt(digitalPinToInterrupt(5), flanc_droite, FALLING);
  attachInterrupt(digitalPinToInterrupt(6), flanc_validation, FALLING);
  attachInterrupt(digitalPinToInterrupt(7), flanc_retour, FALLING);

  //config the blue led on the ESP32
  pinMode(15,OUTPUT);
  digitalWrite(15,LOW);

  dht.begin();

  delay(250); // wait for the OLED to power up
  display.begin(i2c_Address, true);
 
  display.display();
  delay(2000);

  // Clear the buffer.
  display.clearDisplay();

  //config the text parameter for the screen
  display.setTextSize(1);
  display.cp437(true);
  display.setTextColor(SH110X_WHITE);

}

void loop() {
  // put your main code here, to run repeatedly:

  //retrievation of the time from the ntp server
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
  }

  //retrievation of the temperature and humidity from the sensor
  temp = dht.readTemperature()+sensor_temp_offset;
  hum = dht.readHumidity()+sensor_hum_offset;

  //filter the non-numerical values
  if (isnan(temp)) {
    temp=ptemp;
  }
  else ptemp=temp;
  if (isnan(hum)) {
    hum=phum;
  }
  else phum=hum;

  //page management and display
  if (k==1){
    aff_temp(temp);
    enter_param=0;
  }
  if (k==2){
    aff_hum(hum);
    enter_param=0;
  }
  if (k==0){
    aff_heure();
    enter_param=0;
  }
  if (k==3){
    aff_param();
  }

  //send the current data to the spreadsheet every 10 min
  if (timeinfo.tm_min%10==0){
    if (n==1) {
      n=0;
      sendData(temp,hum,"addData");
    }
  }
  else n=1;
  //sned the current data to the spreadsheet the delay depend on the option in the arameter page
  if (offset!=99) {
    if ((timeinfo.tm_min)!=(lastmin)){
    f++;
    Serial.printf("f=%d\n",f);
    if(f==offset) {sendData(temp,hum,"currentValue"); f=0;}
    lastmin=timeinfo.tm_min;
  }
  }

  if (offset!=poffset) {Serial.printf("offset=%d\n", offset); poffset=offset;}
  else poffset=offset;

  display.clearDisplay();
  digitalWrite(15,HIGH);
}
